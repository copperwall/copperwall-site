{"data":{"markdownRemark":{"html":"<p>I've been splitting different services on my servers into their own jails so that they can be isolated for security and isolation purposes. However, these jails are long-running systems, so they need to be patched frequently. Now that I have over five of these jails running, it's been tedious to run the <code>pkg update</code> and <code>pkg upgrade</code> commands five or more times anytime I need to upgrade the software on them. I decided to make a single script that will run both of those commands on each jail.</p>\n<p>My first attempt at this script had variable with each jail name and would iterate over that list of names, running <code>jexec $jail pkg update</code>.</p>\n<pre><code class=\"language-sh\"># Version 1\n\nJAILS=\"www plex db\"\n\nfor JAIL in $JAILS; do\n   sudo jexec $JAIL pkg update\n   sudo jexec $JAIL pkg upgrade\ndone\n</code></pre>\n<p>This did the job, but the static list of jail names didn't really feel right. This meant that anytime I add a new jail I have to remember to update the list in this script, otherwise the jail could get left behind whenever the rest get updates. The solution I chose is to take information from the <code>jls</code> command, which outputs a list of running jails and attributes like JID, Hostname, IP Address, and Path.</p>\n<pre><code># Example jls output\nJID  IP Address      Hostname                      Path\n 3  192.168.2.9     www.longsword.haus            /usr/local/jails/www\n 4  192.168.2.8     db.longsword.haus             /usr/local/jails/db\n 5  192.168.2.7     plex.longsword.haus           /usr/local/jails/plex\n</code></pre>\n<p>I only really need that first column, so I need to do something to grab that column from the output while throwing away the first row. This is a job for <code>awk</code>.</p>\n<p>The end command for that text transformation is:</p>\n<pre><code class=\"language-sh\">jls | awk 'NR>1 { print $1 }'\n</code></pre>\n<p>I'm not really an awk wizard, but from what I understand the <code>NR>1</code> means to only run the <code>{ }</code> block after the first row of text. The <code>print $1</code> means to output the first \"column\" from that row.</p>\n<p>Now that we have a nice list of Jail IDs (JIDs), we can modify the update script to be more dynamic.</p>\n<pre><code class=\"language-sh\"># Grab list of JIDs from running Jails\nJAILS=\"$(jls | awk 'NR>1 { print $1 }')\"\n\n# Run pkg update/upgrade on each of those JIDs\nfor JAIL in $JAILS; do\n   sudo jexec $JAIL pkg update\n   sudo jexec $JAIL pkg upgrade\ndone\n</code></pre>\n<p>That's it! Running this script will run <code>pkg update</code> and <code>pkg upgrade</code> on all of your running jails.</p>\n<h3>Improvements and Alternatives</h3>\n<p>One alternative to <code>jexec</code> is to run <code>pkg -j &#x3C;JID></code> from the host machine. This also works, but will throw warnings if your host is a different OS version from the jail. For example, my host is <code>12.0-CURRENT</code> while most jails are still some version of <code>11.0-RELEASE</code>.</p>\n<p>An improvement to this script is to give an option to open a shell in the jail after upgrades to restart services that have been upgraded. This is helpful for when a running service has been upgraded, but needs to be restarted in order to load the new version (nginx, postgres, plex, etc.).</p>\n<h3>Repo</h3>\n<p><a href=\"https://github.com/copperwall/pkg-all-jails\">https://github.com/copperwall/pkg-all-jails</a></p>","frontmatter":{"title":"Quick Jail Updating in FreeBSD"}}},"pageContext":{"slug":"/2017-02-19-quick-jail-updating-in-freebsd/"}}